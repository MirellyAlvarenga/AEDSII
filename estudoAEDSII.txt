‚úÖ Resumo do que voc√™ tem
Classes e Interfaces
IOrdenator<T>: interface de ordena√ß√£o gen√©rica.

Bubblesort<T> e InsertionSort<T>: implementa√ß√µes de ordena√ß√£o, usam polimorfismo com IOrdenator.

Produto: classe abstrata com atributos e m√©todos comuns.

ProdutoNaoPerecivel e ProdutoPerecivel: subclasses concretas de Produto.

M√©todo Produto.criarDoTexto(...) l√™ produtos do tipo 1 (n√£o perec√≠vel) e 2 (perec√≠vel) a partir de um .txt.

üí° O que pode cair (com foco em polimorfismo)
1. Leitura de produtos de um arquivo
Voc√™ j√° tem isso quase pronto. Exemplo de c√≥digo:

java
Copiar
Editar
List<Produto> produtos = new ArrayList<>();

try (BufferedReader br = new BufferedReader(new FileReader("produtos.txt"))) {
    String linha;
    while ((linha = br.readLine()) != null) {
        Produto produto = Produto.criarDoTexto(linha);
        produtos.add(produto); // POLIMORFISMO: uma lista de Produto armazena diferentes tipos de Produto
    }
} catch (IOException e) {
    e.printStackTrace();
}
üîÅ A lista List<Produto> armazena ProdutoPerecivel e ProdutoNaoPerecivel, mas voc√™ trata tudo como Produto.

2. Ordena√ß√£o com polimorfismo
Voc√™ pode usar qualquer ordenador com qualquer tipo de produto:

java
Copiar
Editar
IOrdenator<Produto> ordenator = new Bubblesort<>(); // ou new InsertionSort<>();
Produto[] arrayProdutos = produtos.toArray(new Produto[0]);

ordenator.ordenar(arrayProdutos);

System.out.println("Compara√ß√µes: " + ordenator.getComparacoes());
System.out.println("Movimenta√ß√µes: " + ordenator.getMovimentacoes());
System.out.println("Tempo: " + ordenator.getTempoOrdenacao() + " ms");
Aqui tamb√©m rola polimorfismo duplo:

Interface IOrdenator com implementa√ß√µes diferentes.

Array de Produto contendo objetos de subclasses.

3. Uso de m√©todos polim√≥rficos
Voc√™ pode chamar m√©todos como valorDeVenda() sem saber o tipo concreto:

java
Copiar
Editar
for (Produto p : arrayProdutos) {
    System.out.println(p); // toString chama valorDeVenda(), que √© implementado de forma diferente em cada subclasse
}
Ou seja: mesmo que p seja do tipo Produto, o m√©todo correto da subclasse vai ser chamado.

üìÅ Exemplo de produtos.txt
swift
Copiar
Editar
1;Sabonete;2.50;0.30
2;Leite;3.90;0.25;15/05/2025
1;Shampoo;7.00;0.50
2;Iogurte;4.00;0.20;10/04/2025
üí• Dicas para a prova/atividade
‚ö†Ô∏è N√£o use instanceof √† toa, o c√≥digo j√° usa polimorfismo corretamente.

‚ú® Valorize o uso de abstra√ß√µes: Produto como superclasse e IOrdenator como interface.

üß™ Testa seu c√≥digo antes com diferentes entradas no produtos.txt.

üéØ Se pedirem para ordenar por valor de venda, mude o compareTo para usar valorDeVenda():

java
Copiar
Editar
public int compareTo(Produto outro) {
    return Double.compare(this.valorDeVenda(), outro.valorDeVenda());
}
Quer que eu monte um exemplo completo de programa principal (main) com leitura do .txt, ordena√ß√£o e exibi√ß√£o?







Voc√™ disse:
eu quero um exemplo completo de programa principal (main) com leitura do .txt, ordena√ß√£o e exibi√ß√£o


O ChatGPT disse:
Perfeito! Aqui vai um exemplo completo de programa principal (Main.java), que:

L√™ os produtos do arquivo produtos.txt

Usa Produto.criarDoTexto(...) para instanciar as subclasses

Armazena tudo em uma lista de Produto

Converte pra array

Ordena com IOrdenator<Produto> (usando Bubblesort)

Exibe todos os produtos ordenados + estat√≠sticas da ordena√ß√£o

üß† Pr√©-requisitos (certifique-se que voc√™ tenha):
Produto.java (classe abstrata)

ProdutoPerecivel.java

ProdutoNaoPerecivel.java

IOrdenator<T>.java

Bubblesort<T>.java (ou InsertionSort<T>.java)

O m√©todo Produto.criarDoTexto(String linha) devidamente implementado

‚úÖ Arquivo Main.java
java
Copiar
Editar
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = new ArrayList<>();

        // Leitura do arquivo
        try (BufferedReader br = new BufferedReader(new FileReader("produtos.txt"))) {
            String linha;
            while ((linha = br.readLine()) != null) {
                Produto produto = Produto.criarDoTexto(linha);
                produtos.add(produto);
            }
        } catch (IOException e) {
            System.err.println("Erro ao ler o arquivo: " + e.getMessage());
            return;
        }

        // Convertendo lista para array
        Produto[] arrayProdutos = produtos.toArray(new Produto[0]);

        // Ordena√ß√£o usando polimorfismo
        IOrdenator<Produto> ordenator = new Bubblesort<>(); // ou InsertionSort<>
        ordenator.ordenar(arrayProdutos);

        // Exibi√ß√£o dos produtos ordenados
        System.out.println("=== Produtos Ordenados (por valor de venda) ===");
        for (Produto p : arrayProdutos) {
            System.out.println(p); // toString polim√≥rfico
        }

        // Estat√≠sticas
        System.out.println("\n=== Estat√≠sticas de Ordena√ß√£o ===");
        System.out.println("Compara√ß√µes: " + ordenator.getComparacoes());
        System.out.println("Movimenta√ß√µes: " + ordenator.getMovimentacoes());
        System.out.println("Tempo de execu√ß√£o: " + ordenator.getTempoOrdenacao() + " ms");
    }
}
üìù Exemplo de Produto.compareTo() (se for por valorDeVenda()):
java
Copiar
Editar
@Override
public int compareTo(Produto outro) {
    return Double.compare(this.valorDeVenda(), outro.valorDeVenda());
}
